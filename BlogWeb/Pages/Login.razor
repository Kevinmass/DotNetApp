@page "/auth/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<h1>Login</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginRequest.UserName" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="loginRequest.Password" />
                </div>

                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading) { <span>Loading...</span> } else { <span>Login</span> }
                </button>
            </EditForm>

            <p class="mt-3">
                Don't have an account? <a href="/auth/register">Register here</a>
            </p>
            <p>
                <a href="/">Back to Blog</a>
            </p>
        </div>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private LoginRequest loginRequest = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

            if (response.IsSuccessStatusCode && result != null)
            {
                // Store token in localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginRequest
    {
        public string UserName { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class AuthResponse
    {
        public string Token { get; set; } = "";
        public User? User { get; set; }
    }

    public class User
    {
        public string? Id { get; set; }
        public string? Email { get; set; }
        public string? UserName { get; set; }
    }
}
