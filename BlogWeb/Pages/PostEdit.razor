@page "/post/new"
@page "/post/edit/{id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(post?.Id == 0 ? "Create Post" : "Edit Post")</PageTitle>

<h1>@(post?.Id == 0 ? "Create New Post" : $"Edit Post: {post?.Title}")</h1>

<EditForm Model="post" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="post!.Title" />
    </div>

    <div class="form-group">
        <label for="content">Content</label>
        <InputTextArea id="content" class="form-control" rows="10" @bind-Value="post!.Content" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/" class="btn btn-secondary ml-2">Cancel</a>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Post? post;

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            post = await Http.GetFromJsonAsync<Post>($"api/posts/{Id}");
            if (post == null)
            {
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            post = new Post();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (post == null) return;

        HttpResponseMessage response;
        if (post.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/posts", post);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/posts/{post.Id}", post);
        }

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
    }

    public class Post
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
    }
}
