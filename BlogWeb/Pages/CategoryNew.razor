@page "/category/new"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Create Category</PageTitle>

<h1>Create New Category</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="category" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="category!.Name" />
            <small class="form-text text-muted">
                2-50 characters, must be unique.
            </small>
        </div>

        <div class="form-group">
            <label for="description">Description (Optional)</label>
            <InputTextArea id="description" class="form-control" rows="3" @bind-Value="category!.Description" />
            <small class="form-text text-muted">
                Up to 200 characters.
            </small>
        </div>

        <button type="submit" class="btn btn-primary">Create</button>
        <a href="/" class="btn btn-secondary ml-2">Cancel</a>
    </EditForm>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">
        @successMessage
    </div>
}

@code {
    private Category category = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        var token = await GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            Navigation.NavigateTo("/auth/login");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (category == null) return;

        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/categories", category);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Category created successfully! Redirecting...";
                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<string?> GetTokenAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        }
        catch
        {
            return null;
        }
    }

    public class Category
    {
        public string Name { get; set; } = "";
        public string? Description { get; set; }
    }
}
